The ``Add`` module
======================

Using ``add_integer``
-------------------

>>> add_integer = __import__("0-add_integer").add_integer

>>> add_integer(12, 3)
15
>>> add_integer(3, -9)
-6
>>> add_integer(7,-5)
2
>>> [add_integer(i, i ** 2) for i in range(3)]
[0, 2, 6]
>>> add_integer(2, 2.1)
4
>>> add_integer(2.1, 2)
4
>>> add_integer(2.1, 2.1)
4
>>> add_integer(1, False)
Traceback (most recent call last):
...
TypeError: b must be an integer
>>> add_integer("s", 2)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer(2.3, None)
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(1, float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer


>>> add_integer(1, float('inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer


>>> add_integer(999999999999999999999999999999, 1)
1000000000000000000000000000000

>>> add_integer(1)
99

>>> print(add_integer(None))
Traceback (most recent call last):
TypeError: a must be an integer

>>> print(add_integer(10, None))
Traceback (most recent call last):
TypeError: b must be an integer

>>> print(add_integer(None, None))
Traceback (most recent call last):
TypeError: a must be an integer

>>> print(add_integer("hi", 10))
Traceback (most recent call last):
TypeError: a must be an integer

>>> print(add_integer(30, [10, 20]))
Traceback (most recent call last):
TypeError: b must be an integer
